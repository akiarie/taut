Taut, the boolean algebra simplifier.

Application built in Go with simple interpreter for boolean algebra.

Functions
1. Given a truth table, reduce it to (unsimplified) statement (or sequence of statements).
2. Given statement, simplify if possible.
3. Given a statement and condition, return output.

Representation of Tables
Tables are represented using strings of the following form:
    "A, B, ... -> Y[ijkl...], X[mnop...], ..."
where A,B,... are input boolean values; Y,X... are the output.
Note that the length of each of the values must be equal.
All space characters will be ignored.
Don't care will be implemented in a later version, most probably as _.

Examples
    
    Table 1: AND/OR
    A	B	A+B	A*B
    0	0	 0	 0
    0	1	 1	 0
    1	0	 1	 0
    1	1	 1	 1

A+B would be represented like this:
    "A, B -> OR[0111]",
while A*B will be
    "A, B -> AND[0001]";
the entire table is
    "A, B -> OR[0111], AND[0001]".
    
Representation of Statements
Sequences of uppercase letters will be used to represent booleans.

The following logical operators are permitted and understood:
    
    Table 2: Operators
    Operator	Representation
    AND			*
    OR			+
    NOT			!

For version 2, operators will be customizable and definable.
